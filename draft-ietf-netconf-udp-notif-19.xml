<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc>
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-ietf-netconf-udp-notif-19"
     ipr="trust200902" consensus="true" submissionType="IETF">
  <front>
    <title abbrev="UDP-Notif">UDP-based Transport for Configured
    Subscriptions</title>

    <author fullname="Guangying Zheng" initials="G." surname="Zheng">
      <organization>Huawei</organization>

      <address>
        <postal>
          <street>101 Yu-Hua-Tai Software Road</street>

          <city>Nanjing</city>

          <code/>

          <region>Jiangsu</region>

          <country>China</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>zhengguangying@huawei.com</email>
      </address>
    </author>

    <author fullname="Tianran Zhou" initials="T." surname="Zhou">
      <organization>Huawei</organization>

      <address>
        <postal>
          <street>156 Beiqing Rd., Haidian District</street>

          <city>Beijing</city>

          <region/>

          <code/>

          <country>China</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>zhoutianran@huawei.com</email>

        <uri/>
      </address>
    </author>

    <author fullname="Thomas Graf" initials="T." surname="Graf">
      <organization>Swisscom</organization>

      <address>
        <postal>
          <street>Binzring 17</street>

          <city>Zuerich 8045</city>

          <region/>

          <code/>

          <country>Switzerland</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>thomas.graf@swisscom.com</email>

        <uri/>
      </address>
    </author>

    <author fullname="Pierre Francois" initials="P." surname="Francois">
      <organization>INSA-Lyon</organization>

      <address>
        <postal>
          <street/>

          <city>Lyon</city>

          <region/>

          <code/>

          <country>France</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>pierre.francois@insa-lyon.fr</email>

        <uri/>
      </address>
    </author>

    <author fullname="Alex Huang Feng" initials="A." surname="Huang Feng">
      <organization>INSA-Lyon</organization>

      <address>
        <postal>
          <street/>

          <city>Lyon</city>

          <region/>

          <code/>

          <country>France</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>alex.huang-feng@insa-lyon.fr</email>

        <uri/>
      </address>
    </author>

    <author fullname="Paolo Lucente" initials="P." surname="Lucente">
      <organization>NTT</organization>

      <address>
        <postal>
          <street>Siriusdreef 70-72</street>

          <city>Hoofddorp, WT 2132</city>

          <region/>

          <code/>

          <country>NL</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>paolo@ntt.net</email>

        <uri/>
      </address>
    </author>

    <date day="04" month="February" year="2025"/>

    <workgroup>NETCONF</workgroup>

    <abstract>
      <t>This document describes a UDP-based transport for YANG notifications
      to collect data from network nodes. A shim header is defined to
      facilitate the data streaming directly from the publishing process on
      network processor of line cards to receivers. Such a design enables higher
      frequency and less performance impact on publisher and receiver processes compared to
      already established notification mechanisms.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The mechanism to support a subscription of a continuous and
      customized stream of updates from a YANG datastore <xref
      target="RFC8342"/> is defined in Subscribed Notifications <xref target="RFC8639"/>
      and YANG-Push <xref target="RFC8641"/>. Requirements for
      Subscription to YANG Datastores are defined in <xref
      target="RFC7923"/>.</t>

      <t>Subscribed Notifications <xref target="RFC8639"/> separate the management and control
      of subscriptions from the transport used to deliver the data. Three transport mechanisms,
      namely <xref target="RFC8640">NETCONF transport</xref>, <xref
      target="RFC8650">RESTCONF transport</xref>, and <xref
      target="I-D.ietf-netconf-https-notif">HTTPS transport</xref> were
      defined for such notification messages.</t>

      <t>While powerful in their features, and general in their architecture,
      the currently available transport mechanisms need to be complemented to
      support data publications at high frequency with low overhead. This is
      important for network nodes that feature a distributed architecture with sparse
      resources on components specialized for packet forwarding. The currently
      available transports are TCP-based requiring the maintenance of connections,
      states and retransmissions, which is not necessary for high-frequency continuous
      notification content, typically published directly from network processors on line cards.</t>

      <t>This document specifies a transport option for Subscribed Notifications
      <xref target="RFC8639"/> that leverages UDP. Specifically, it facilitates the distributed data
      collection mechanism described in <xref
      target="I-D.ietf-netconf-distributed-notif"/>. In the case of publishing
      from multiple network processors on multiple line cards, centralized
      designs require data to be internally forwarded from those network
      processors to the push server, presumably on a route processor, which
      then combines the individual data items into a single consolidated
      stream. The centralized data collection mechanism can result in a
      performance bottleneck, especially when large amounts of data are
      involved.</t>

      <t>What is needed is a mechanism that allows for directly publishing
      from multiple network processors on line cards, without passing them
      through an additional processing stage for internal consolidation. The
      UDP-based transport allows for such a distributed data
      publishing approach:</t>

      <t><list style="symbols">
          <t>Firstly, a UDP approach reduces the burden of maintaining a large
          pool of active TCP connections at the receiver, notably in cases
          where it collects data from network processors on line cards from a
          large amount of network nodes.</t>

          <t>Secondly, as no connection state needs to be maintained, UDP
          encapsulation can be easily implemented by the hardware of the
          publisher, which further improves performance.</t>

          <t>Ultimately, such advantages allow for a larger data analysis
          feature set, as more voluminous, finer grained data sets can be
          streamed to the receiver.</t>
        </list></t>

      <t>The transport described in this document can be used for transmitting
      notification messages over both IPv4 and IPv6.</t>

      <t>This document describes the notification mechanism. It is intended to
      be used in conjunction with <xref target="RFC8639"/>, extended by <xref
      target="I-D.ietf-netconf-distributed-notif"/>.</t>

      <t><xref target="sec_transport"/> describes the control of the proposed
      transport mechanism. <xref target="sec_ups_transport"/> details the
      notification mechanism and message format. <xref target="sec_options"/>
      describes the use of options in the notification message header. <xref
      target="sec_applicability"/> covers the applicability of the
      mechanism. <xref target="sec_dtls_udp_notif"/> describes a mechanism to
      secure the protocol in open networks.</t>
    </section>

    <section title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in BCP 14
      <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when,
      they appear in all capitals, as shown here.</t>

      <t>The following terms are used as defined in Subscribed Notifications <xref target="RFC8639"/>:</t>
      <ul>
        <li>Notification message</li>
        <li>Subscription</li>
        <li>Configured Subscription</li>
        <li>Subscriber</li>
        <li>Publisher</li>
        <li>Receiver</li>
      </ul>
    </section>

    <section anchor="sec_transport"
             title="Configured Subscription to UDP-Notif">
      <t>This section describes how the proposed mechanism can be controlled
      using subscription channels based on NETCONF or RESTCONF.</t>

      <t>Configured subscriptions, as defined in <xref target="RFC8639" section="2.5">
      Subscribed Notifications</xref>, contain the transport configuration of all
      the receivers. This document introduces a receiver instance dedicated
      to UDP-Notif, specifying the IP address and port number used for sending UDP-Notif
      messages to the designated receivers.</t>

      <t>Note that receivers may not be already up and running when the
      configuration of the subscription takes effect on a monitored network
      node. The first message generated by the publisher MUST be a separate
      "subscription-started" notification to indicate to the receiver that the stream has started
      flowing. Then, the notifications can be sent immediately without delay.
      Subscription state notifications, defined in Section 2.7 of
      <xref target="RFC8639"/>, MUST be encapsulated in separate notification
      messages.</t>
      <!-- TODO:What if it the message is lost? -->
      <t>Note also that publishers MAY NOT be aware of the capabilities supported by the receivers.
      </t>

    </section>

    <section anchor="sec_ups_transport" title="UDP-Based Transport">
      <t>This section specifies the UDP-Notif transport behavior. <xref
      target="sec_design"/> describes the general design of the solution.
      <xref target="sec_ups_format"/> specifies the UDP-Notif message format
      and <xref target="sec_encoding"/> describes the encoding of the message
      payload.</t>

      <section anchor="sec_design" title="Design Overview">
        <t>As specified in <xref target="RFC8639" section="2.6">Subscribed Notifications</xref>,
        the YANG data is encapsulated in a NETCONF/RESTCONF notification message, which is then
        encapsulated and carried using a transport protocol. <xref
        target="fig_ups_message"/> illustrates the structure of a UDP-Notif
        message:</t>

        <t><list style="symbols">
            <t>The Message Header contains information that facilitates the
            message transmission before deserializing the notification
            message.</t>

            <t>The Notification Message is the encoded content that is transported
            by the publication stream. The common encoding methods are listed
            in <xref target="sec_ups_format"/>. The structure of the
            notification message is defined in Section 2.6 of <xref
            target="RFC8639">Subscribed Notifications</xref>.
            <!-- and a YANG model has been proposed in <xref
            target="I-D.ahuang-netconf-notif-yang"/>.
            <xref target="I-D.ietf-netconf-notification-messages"/> proposes a
            structure to send bundled notifications in a single message. -->
            </t>
          </list></t>

        <t><figure anchor="fig_ups_message" title="UDP-Notif Message Overview">
            <artwork align="center"><![CDATA[
+-------+  +--------------+  +--------------+
|  UDP  |  |   Message    |  | Notification |
|       |  |   Header     |  | Message      |
+-------+  +--------------+  +--------------+
]]></artwork>
          </figure></t>

        <t/>
      </section>

      <section anchor="sec_ups_format"
               title="Format of the UDP-Notif Message Header">
        <t>The UDP-Notif message header contains information that facilitates
        the message transmission between the publisher and the receiver before
        deserializing the notification message. The data format is shown in <xref
        target="fig_ups_header"/>.</t>

        <figure anchor="fig_ups_header"
                title="UDP-Notif Message Header Format">
          <artwork align="center"><![CDATA[
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-----+-+-------+---------------+-------------------------------+
 | Ver |S|  MT   |  Header Len   |      Message Length           |
 +-----+-+-------+---------------+-------------------------------+
 |                     Message Publisher ID                      |
 +---------------------------------------------------------------+
 |                         Message ID                            |
 +---------------------------------------------------------------+
 ~                          Options                              ~
 +---------------------------------------------------------------+

]]></artwork>
        </figure>

        <t/>

        <t>The Message Header contains the following field:</t>

        <t><list style="symbols">
            <t>Ver indicates the UDP-Notif protocol header version. The values
            are allocated by the IANA registry <xref target="sec_iana_reg">"UDP-Notif
            header version"</xref>. The current header version number is 1.</t>

            <t>S-flag represents the space of media type specified in the MT field.
            When S-flag is not set, MT represents the standard media types as defined
            in the IANA registry <xref target="sec_iana_reg">"UDP-Notif media
            types"</xref>. When S-flag is set, MT represents a private space to
            be freely used for non-standard encodings. When S is set, the 
            Private Encoding Option defined in <xref target="sec_enc_opt"/>
            can be used in conjunction with MT to define more verbose encoding descriptions.
            </t>

            <t>MT is a 4-bit identifier that indicates the media type used for
            the notification message. When the S bit is not set, the following values apply:<list
                style="symbols">
                <t>0: Reserved, MUST NOT be used.</t>

                <t>1: application/yang-data+json <xref target="RFC8040"/></t>

                <t>2: application/yang-data+xml <xref target="RFC8040"/></t>

                <t>3: application/yang-data+cbor <xref target="RFC9254"/></t>
              </list></t>

            <t>Header Len (8-bit) records the length of the message header in octets,
            including both the fixed header and the options.</t>

            <t>Message Length (16-bit) records the total length of the UDP-Notif message
            within one UDP datagram, measured in octets, including the message
            header. When the notification message is segmented using the
            Segmentation Options defined in <xref target="sec_fragmentation"/>,
            the Message Length is the total length of the current 
            UDP-Notif segment, not the length of the entire notification 
            message.</t>

            <t>Message Publisher ID is a 32-bit identifier defined in <xref
            target="I-D.ietf-netconf-distributed-notif"/>. This identifier is
            locally unique to the publisher node. It identifies the software process
            generating the stream of UDP-Notif messages and allow the disambiguation
            of an information source. Message unicity is obtained from the conjunction of the Message
            Publisher ID and the Message ID field. If Message
            Publisher ID unicity is not preserved through the collection
            domain, the source IP address of the UDP datagram SHOULD be used
            in addition to the Message Publisher ID to identify the
            information source. If a transport layer relay is used, Message
            Publisher ID unicity must be preserved through the collection
            domain.</t>

            <t>The Message ID is increased monotonically by the publisher of
            UDP-Notif messages. A publisher MUST use different Message IDs
            for different messages generated with the same Message
            Publisher ID. Note that the main purpose of the Message ID is to
            reconstruct messages which are segmented using the segmentation
            option described in <xref target="sec_fragmentation"/>.
            The Message ID values SHOULD be incremented by one for
            successive messages originated with the same Message Publisher ID,
            so that message loss can be detected at data collection. When the last value (2^32-1)
            of Message ID has been reached, the Message ID wraps around and
            restarts at 0. Different subscribers MAY share the same Message ID
            sequence.</t>

            <t>Options are a variable-length field in the TLV format. When the
            Header Length is larger than 12 octets, which is the length of the
            fixed header, Options TLVs follow directly after the fixed message
            header. Options are described in <xref target="sec_options"/>.</t>
          </list></t>

          <t>All the binary fields MUST be encoded in network byte order (big
          endian).</t>

        <t/>
      </section>

      <section anchor="sec_encoding" title="Data Encoding">
        <t>UDP-Notif message data can be encoded in XML, JSON or CBOR format.
        Additional encodings may be supported in the
        future. This can be accomplished by augmenting the subscription data
        model with additional identity statements used to refer to requested
        encodings.</t>

        <t>Private encodings can be used by enabling the S-flag of the header. When the S-flag
        is set, the value of the MT field is left to be defined and agreed
        upon by the users of the private encoding. An option is defined in
        <xref target="sec_enc_opt"/> for more verbose encoding descriptions.
        Users defining a private encoding MAY use any combination of MT and private encoding
        fitting their needs.</t>

        <t>It is RECOMMENDED that the publisher is configured to generate notification
        messages using only one encoding method per subscription.</t>

        <!-- Implementations MAY support multiple encoding methods within the same
        subscription. It is NOT RECOMMENDED to use multiple encodings within the same
        subscription. -->
        <!-- <t>Implementations MAY support multiple encoding methods per
        subscription. When bundled notifications are supported between the
        publisher and the receiver, only subscribed notifications with the
        same encoding can be bundled in a given message.</t> -->
      </section>
    </section>

    <section anchor="sec_options" title="Options">
      <t>All the options are defined with the format shown in
      <xref target="fig_ups_message_options"/>.</t>

      <t><figure anchor="fig_ups_message_options"
          title="Generic Option Format">
          <artwork align="center"><![CDATA[
  0                   1                   2                   3        
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+--------------------------------
 |     Type      |    Length     |    Variable-length data     
 +---------------+---------------+--------------------------------]]></artwork>
        </figure></t>

      <t><list style="symbols">
          <t>Type: 1-octet describing the option type. The values of the Type field 
          are allocated by the IANA regsitry <xref target="sec_iana_reg">"UDP-Notif options
          types"</xref>.</t>

          <t>Length: 1-octet representing the total number of octets in the
          TLV, including the Type and Length fields.</t>

          <t>Variable-length data: 0 or more octets of data.</t>
        </list></t>

      <t>When more than one option are used in a UDP-Notif header, the segmentation option
      defined in <xref target="sec_fragmentation"/> MUST be placed first. Placing the segmentation
      option first can simplify some implementations for both the publisher and the
      receiver, notably those using hardware acceleration that assume a fixed
      location for the segmentation option. Segmented messages without the segmentation option 
      located as the first option, MAY be dropped by the receiver.</t>

      <section anchor="sec_fragmentation" title="Segmentation Option">
        <t>The UDP payload length is limited to 65527 bytes (65535 - 8 bytes).
        Application-level headers will make the actual payload shorter. Even
        though binary encodings such as CBOR may not require more space than what
        is left, more voluminous encodings such as JSON and XML may suffer from
        this size limitation. Although IPv4 and IPv6 publishers can fragment
        outgoing packets exceeding their Maximum Transmission Unit (MTU),
        fragmented IP packets may not be desired for operational and
        performance reasons <xref target="BCP230"/>.</t>

        <t>Implementations MUST provide a configurable parameter to control the maximum size of a
        UDP-Notif segment. This parameter is defined as "max-segment-size" in the YANG module specified
        in <xref target="yang_module"/>.</t>

        <figure anchor="fig_frag_option" title="Segmentation Option Format">
          <artwork align="center"><![CDATA[
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+-----------------------------+-+
 |     Type      |     Length    |        Segment Number       |L|
 +---------------+---------------+-----------------------------+-+
 ]]></artwork>
        </figure>

        <t>The <xref target="fig_frag_option">Segmentation Option</xref> is included when the message content
        is segmented into multiple segments. Different segments of one message
        share the same Message ID. The fields of this option are as follows:</t>

        <t><list style="symbols">
            <t>Type: indicates a Segmentation Option. The value is TBD1.</t>

            <t>Length: indicates the length of this option, in octets. It MUST be set
            to 4 octets.</t>

            <t>Segment Number: 15-bit value indicating the sequence number of
            the current segment. The first segment of a segmented message has
            a segment number value of 0. The segment number cannot wrap around.</t>

            <t>L: indicates whether the current segment is the
            last one of the message. When 0 is set, the current segment is not
            the last one. When 1 is set, the current segment is the last one,
            meaning that the total number of segments used to transport this
            message is the value of the current Segment Number + 1.</t>
          </list></t>

        <t>Implementations MUST NOT rely on IP
        fragmentation by default to carry large messages. Implementations
        MUST either restrict the size of individual
        messages carried over this protocol, or support the segmentation
        option. The parameter "max-segment-size" SHOULD be set
        so that the size of a UDP-Notif segment and the size of the IP layer
        together do not exceed the MTU of the egress interface.</t>

        <t>When a message has multiple options and is segmented, all the options
        MUST be present on the first segment, with the segmentation option placed first. The rest
        of segmented messages MAY include all the options ordered by options type.</t>

        <t>The receiver SHOULD support the reception of unordered segments.
        The implementation of the receiver SHOULD provide an option to discard
        the received segments if, after some time, one of the segments is still
        missing and the reassembly of the message is not possible. If the receiver
        collects a segment more than once, the implementation SHOULD drop the
        duplicate segment.</t>

        <t>To reassemble segmented UDP-Notif messages, the receiver should first identify
        UDP-Notif segments belonging to the same message by using the combination of the Message
        Publisher ID and Message ID. The receiver SHOULD wait for all the segments before starting
        the reassembly process. Once all the segments are collected, the receiver should create a new
        UDP-Notif header with the same Ver, S-flag, MT, Message Publisher ID and Message ID values.
        When UDP-Notif options other than the segmentation option are present in the first segment, 
        these options need to be appended to the newly created UDP-Notif header.
        To reconstruct the original notification message, the receiver must concatenate the
        notification message of each UDP-Notif segments in an ascending order based
        on the Segment Number. The new concatenated notification message becomes the notification message
        of the newly created UDP-Notif message. The Header Length and Message Length are then updated
        accordingly.</t>

      </section>

      <section anchor="sec_enc_opt" title="Private Encoding Option">
        <t>The space to describe private encodings in the MT field of the
        UDP-Notif header being limited, an option is provided to describe
        custom encodings. The fields of this option are as follows.</t>

        <figure anchor="fig_enc_option" title="Private Encoding Option Format">
          <artwork align="center"><![CDATA[
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+--------------------------------
 |     Type      |     Length    |   Variable length enc. descr.  
 +---------------+---------------+--------------------------------

 ]]></artwork>
        </figure>

        <t><list style="symbols">
            <t>Type: Generic option field which indicates a Private Encoding
            Option. The Type value is to be assigned TBD2.</t>

            <t>Length: Generic option field which indicates the length of this
            option in octets. It is a variable value.</t>

            <t>Enc. Descr: The description of the private encoding used for
            this message. The values to be used for such private encodings is
            left to be defined by the users of private encodings.</t>
          </list></t>

        <t>This option SHOULD only be used when the S bit of the header is
        set, as providing a private encoding description for standard
        encodings is meaningless.</t>
      </section>
    </section>

    <section anchor="sec_applicability" title="Applicability">
      <t>This section provides an applicability for the
      UDP-Notif mechanism, following the recommendations of <xref
      target="RFC8085"/>.</t>

      <t>The mechanism falls in the category of UDP applications
      "designed for use within the network of a single network operator or on
      networks of an adjacent set of cooperating network operators, to be
      deployed in controlled environments", as defined in <xref
      target="RFC8085"/>. Implementations SHOULD
      thus follow the recommendations in place for such specific applications.
      In the following, we discuss recommendations on congestion control,
      message size guidelines, reliability considerations and security
      considerations.</t>

      <t>The main use case of the UDP-Notif mechanism is the collection of
      statistical metrics for accounting purposes, where potential loss is not
      a concern, but should however be reported (such as IPFIX Flow Records
      exported with UDP <xref target="RFC7011"/>). Such metrics are typically
      exported in a periodical subscription as described in Section 3.1 of
      <xref target="RFC8641"/>.</t>

      <section anchor="sec_congestion_control" title="Congestion Control">
        <t>The above application falls into the category of applications
        performing transfer of large amounts of data. It is expected that the
        operator using the solution configures dedicated class of services on its related flows. As
        per <xref target="RFC8085"/>, such applications may choose not to
        implement any form of congestion control, but follow the following
        principles.</t>

        <t>It is NOT RECOMMENDED to use the UDP-Notif mechanism over
        congestion-sensitive network paths. The only environments where
        UDP-Notif is expected to be used are managed networks. The deployments
        require that the network path has been explicitly provisioned to
        handle the traffic through traffic engineering mechanisms, such as
        rate limiting or capacity reservations.</t>

        <t>Implementation SHOULD NOT push unbounded volumes of
        traffic by default, and SHOULD require the users to explicitly
        configure such a mode of operation.</t>

        <t>Burst mitigation through packet pacing is RECOMMENDED. Disabling
        burst mitigation SHOULD require the users to explicitly configure such
        a mode of operation.</t>

        <t>Applications SHOULD monitor packet losses and provide means to the
        user for retrieving information on such losses. The UDP-Notif Message
        ID can be used to deduce congestion based on packet loss detection.
        Hence the receiver can notify the Publisher to use a lower streaming
        rate. The interaction to control the streaming rate on the Publisher
        is out of the scope of this document.</t>
      </section>

      <section anchor="sec_message_size" title="Message Size">
        <t><xref target="RFC8085"/> recommends not to rely on IP fragmentation
        for messages whose size result in IP packets exceeding the MTU along
        the path. The segmentation option of the current specification permits
        segmentation of the UDP-Notif message content without relying on IP
        fragmentation. Implementations SHOULD allow for the configuration of the MTU.</t>

        <t>It is RECOMMENDED that the size of a Notification Message is 
        small and segmentation does not result in segmenting the message into too
        much segments to avoid dropping the entire message when there is a lost
        segment. 
        <!-- UDP-Notif messages SHOULD NOT be segmented into more than 100 segments. -->
        When a Notification Message is large, it is RECOMMENDED to use a
        reliable transport such as HTTPS-notif
        <xref target="I-D.ietf-netconf-https-notif"/>.</t>
      </section>

      <section anchor="sec_reliability" title="Reliability">
        <t>A receiver implementation SHOULD discard packets that were received
        but cannot be re-assembled as a
        complete message within a given amount of time. This time SHOULD be
        configurable. 
        <!-- It is RECOMMENDED to discard UDP-Notif segments after 10 seconds. -->
        </t>
      </section>
    </section>

    <section anchor="sec_dtls_udp_notif" title="Secured layer for UDP-Notif">
      <t>In unsecured networks, which are not authenticated and encrypted on
	    layers below transport, UDP-Notif messages MUST be 
      encrypted. In this section, a mechanism using DTLS 1.3 <xref target="RFC9147"/> to secure
      UDP-Notif protocol is presented.</t>

      <t>Implementations using DTLS to secure UDP-Notif messages MUST use DTLS
      1.3 protocol as defined in <xref target="RFC9147"/>. No DTLS 1.3 extensions
      are defined in this document.</t>

      <t>When this security layer is used, the Publisher MUST always be a DTLS
      client, and the Receiver MUST always be a DTLS server. The Receivers
      MUST support accepting UDP-Notif Messages on the configured UDP port, but
      MAY be configurable to listen on a different port. The Publisher MUST
      support sending UDP-Notif messages to the specified UDP port number, but MAY be
      configurable to send messages to a different port. The Publisher MAY use
      any source UDP port for transmitting messages.</t>

      <section anchor="sec_session_lifecycle" title="Session Lifecycle">
        <t>This section describes the lifecycle of UDP-Notif messages when
        they are encrypted using DTLS.</t>

        <section title="DTLS Session Initiation">
          <t>The Publisher initiates a DTLS connection by sending a DTLS
          ClientHello to the Receiver. Implementations MAY support the denial
          of service countermeasures defined by DTLS 1.3 if a given deployment
          can ensure that DoS attacks are not a concern. When these
          countermeasures are used, the Receiver responds with a DTLS
          HelloRetryRequest containing a stateless cookie. The Publisher sends
          a second DTLS ClientHello message containing the received cookie.
          Details can be found in Section 5.1 of <xref target="RFC9147"/>.</t>

          <t>When DTLS is implemented, the Publisher MUST NOT send any
          UDP-Notif messages before the DTLS handshake has successfully
          completed. Early data mechanism (also known as 0-RTT data) as
          defined in <xref target="RFC9147"/> MUST NOT be used.</t>

          <t>Implementations of this security layer MUST support DTLS 1.3
          <xref target="RFC9147"/> and MUST follow recommendations defined
          by <xref target="BCP195"/>. If other cipher suites are used,
          then implementations MUST NOT negotiate a cipher suite that employs
          NULL integrity or authentication algorithms.</t>

          <t>Where confidentiality protection with DTLS is required,
          implementations must negotiate a cipher suite that employs a
          non-NULL encryption algorithm.</t>
        </section>

        <section title="Publish Data">
          <t>When DTLS is used, all UDP-Notif messages MUST be published as
          DTLS "application_data". It is possible that multiple UDP-Notif
          messages are contained in one DTLS record, or that a publication
          message is transferred in multiple DTLS records. The application
          data is defined with the following ABNF <xref target="RFC5234"/>
          expression:</t>

          <t>APPLICATION-DATA = 1*UDP-NOTIF-FRAME</t>

          <t>UDP-NOTIF-FRAME = MSG-LEN SP UDP-NOTIF-MSG</t>

          <t>MSG-LEN = NONZERO-DIGIT *DIGIT</t>

          <t>SP = %d32</t>

          <t>NONZERO-DIGIT = %d49-57</t>

          <t>DIGIT = %d48 / NONZERO-DIGIT</t>

          <t>UDP-NOTIF-MSG is defined in <xref
          target="sec_ups_transport"/>.</t>

          <t>The Publisher SHOULD attempt to avoid IP fragmentation by using
          the Segmentation Option in the UDP-Notif message.</t>
        </section>

        <section title="Session Termination">
          <t>A Publisher MUST close the associated DTLS connection if the
          connection is not expected to deliver any UDP-Notif Messages later.
          It MUST send a DTLS close_notify alert before closing the
          connection. A Publisher (DTLS client) MAY choose to not wait for the
          Receiver's close_notify alert and simply close the DTLS connection.
          Once the Receiver gets a close_notify from the Publisher, it MUST
          reply with a close_notify.</t>

          <t>When no data is received from a DTLS connection for a long time,
          the Receiver MAY close the connection. Implementations SHOULD set
          the timeout value to 10 minutes but application specific profiles
          MAY recommend shorter or longer values. The Receiver (DTLS server)
          MUST attempt to initiate an exchange of close_notify alerts with the
          Publisher before closing the connection. Receivers that are
          unprepared to receive any more data MAY close the connection after
          sending the close_notify alert.</t>

          <t>Although closure alerts are a component of TLS and so of DTLS,
          they, like all alerts, are not retransmitted by DTLS and so may be
          lost over an unreliable network.</t>
        </section>

        <section title="DTLS Fragmentation">
          <t><xref target="RFC9147"/> states that DTLS message may be fragmented into
          multiple DTLS records. A DTLS message carrying a UDP-Notif message SHOULD fit within a
          single datagram to avoid DTLS fragmentation. Implementations SHOULD
          account for DTLS overhead when determining the maximum UDP-Notif
          notification message size.
          </t>
        </section>
      </section>
    </section>

    <section title="A YANG Data Model for Management of UDP-Notif">

      <section title="YANG to configure UDP-Notif" anchor="yang_module">
        <t>The YANG model described in <xref target="sec_yang_model"/> defines
        a new receiver instance for UDP-Notif transport. When this transport
        is used, four new leaves and a dtls container allow configuring
        UDP-Notif receiver parameters.</t>

        <t>The source address of the UDP-Notif message can be configured using the
        "source-address" leaf at the subscription level as defined in
        <xref target="RFC8639" section="2.5" sectionFormat="of"/> or by setting 
        the leaf "local-address" using the "ietf-udp-notif-transport" YANG module.
        When both are configured, the UDP-Notif message MUST use the address configured
        in the "local-address" leaf defined in the "ietf-udp-notif-transport" YANG module.
        </t>

        <sourcecode type="yangtree"><![CDATA[
module: ietf-udp-notif-transport

  augment /sn:subscriptions/snr:receiver-instances
            /snr:receiver-instance/snr:transport-type:
    +--:(udp-notif)
       +--rw udp-notif-receiver
          +--rw remote-address         inet:host
          +--rw remote-port            inet:port-number
          +--rw local-address?         inet:ip-address
          |       {local-binding}?
          +--rw local-port?            inet:port-number
          |       {local-binding}?
          +--rw dtls! {dtls13}?
          |  +--rw client-identity!
          |  |  +--rw (auth-type)
          |  |     +--:(certificate) {client-ident-x509-cert}?
          |  |     |     ...
          |  |     +--:(raw-public-key)
          |  |     |        {client-ident-raw-public-key}?
          |  |     |     ...
          |  |     +--:(tls13-epsk) {client-ident-tls13-epsk}?
          |  |           ...
          |  +--rw server-authentication
          |  |  +--rw ca-certs! {server-auth-x509-cert}?
          |  |  |  +--rw (inline-or-truststore)
          |  |  |        ...
          |  |  +--rw ee-certs! {server-auth-x509-cert}?
          |  |  |  +--rw (inline-or-truststore)
          |  |  |        ...
          |  |  +--rw raw-public-keys! {server-auth-raw-public-key}?
          |  |  |  +--rw (inline-or-truststore)
          |  |  |        ...
          |  |  +--rw tls13-epsks?       empty
          |  |          {server-auth-tls13-epsk}?
          |  +--rw hello-params {tlscmn:hello-params}?
          |  |  +--rw tls-versions
          |  |  |  +--rw min?   identityref
          |  |  |  +--rw max?   identityref
          |  |  +--rw cipher-suites
          |  |     +--rw cipher-suite*
          |  |             tlscsa:tls-cipher-suite-algorithm
          |  +--rw keepalives {tls-client-keepalives}?
          |     +--rw peer-allowed-to-send?   empty
          |     +--rw test-peer-aliveness!
          |        +--rw max-wait?       uint16
          |        +--rw max-attempts?   uint8
          +--rw enable-segmentation?   boolean
          +--rw max-segment-size?      uint16
  ]]></sourcecode>
      </section>

      <section anchor="sec_yang_model" title="YANG Module">
        <t>This YANG module is used to configure, on a publisher, a receiver
        willing to consume notification messages. This module augments the
        "ietf-subscribed-notif-receivers" module to define a UDP-Notif
        transport receiver. The grouping "udp-notif-receiver" defines
        the necessary parameters to configure the transport defined in this
        document using the generic "udp-client" grouping from the 
        "ietf-udp-client" module <xref target="I-D.ietf-netconf-udp-client-server"/>
        and the "tls-client-grouping" defined in the "ietf-tls-client" module
        <xref target="RFC9645"/>.</t>

        <sourcecode name="ietf-udp-notif-transport@2025-02-07.yang" type="yang" markers="true"><![CDATA[
module ietf-udp-notif-transport {
  yang-version 1.1;
  namespace
    "urn:ietf:params:xml:ns:yang:ietf-udp-notif-transport";
  prefix unt;
  import ietf-subscribed-notifications {
    prefix sn;
    reference
      "RFC 8639: Subscription to YANG Notifications";
  }
  import ietf-subscribed-notif-receivers {
    prefix snr;
    reference
      "RFC YYYY: An HTTPS-based Transport for
                 Configured Subscriptions";
  }
  import ietf-udp-client {
    prefix udpc;
    reference
      "RFC ZZZZ: YANG Grouping for UDP Clients and UDP Servers";
  }
  import ietf-tls-common {
    prefix tlscmn;
    reference
      "RFC 9645: YANG Groupings for TLS Clients and TLS Servers";
  }
  import ietf-tls-client {
    prefix tlsc;
    reference
      "RFC 9645: YANG Groupings for TLS Clients and TLS Servers";
  }

  organization "IETF NETCONF (Network Configuration) Working Group";
  contact
    "WG Web:   <http:/tools.ietf.org/wg/netconf/>
     WG List:  <mailto:netconf@ietf.org>

     Authors:  Guangying Zheng
               <mailto:zhengguangying@huawei.com>
               Tianran Zhou
               <mailto:zhoutianran@huawei.com>
               Thomas Graf
               <mailto:thomas.graf@swisscom.com>
               Pierre Francois
               <mailto:pierre.francois@insa-lyon.fr>
               Alex Huang Feng
               <mailto:alex.huang-feng@insa-lyon.fr>
               Paolo Lucente
               <mailto:paolo@ntt.net>";

  description
    "Defines a model for configuring UDP-Notif as a transport
    for configured subscriptions [RFC8639].

    Copyright (c) 2025 IETF Trust and the persons identified as
    authors of the code.  All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, is permitted pursuant to, and subject to the license
    terms contained in, the Revised BSD License set forth in Section
    4.c of the IETF Trust's Legal Provisions Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC XXXX; see the RFC
    itself for full legal notices.";

  revision 2025-02-07 {
    description
      "Initial revision";
    reference
      "RFC XXXX: UDP-based Transport for Configured Subscriptions";
  }
 
 /*
  * FEATURES
  */
  feature encode-cbor {
    description
      "Indicates that CBOR encoding of notification
      messages is supported.";
    reference
      "RFC 9254: CBOR Encoding of Data Modeled with YANG";
  }
  feature dtls13 {
    description
      "Indicates that DTLS 1.3 encryption of UDP
      packets is supported.";
    reference 
      "RFC 9147: The Datagram Transport Layer Security (DTLS)
      Protocol Version 1.3";
  }

 /*
  * IDENTITIES
  */  
  identity udp-notif {
    base sn:transport;
    base sn:configurable-encoding;
    description
      "UDP-Notif is used as transport for notification messages
        and state change notifications.";
  }

  identity encode-cbor {
    base sn:encoding;
    description
      "Encode data using CBOR.";
    reference
      "RFC 9254: CBOR Encoding of Data Modeled with YANG";
  }

  grouping udp-notif-receiver {
    description
      "Provides a reusable identification of a UDP-Notif target
      receiver.";

    uses udpc:udp-client {
      refine remote-port {
        mandatory true;
      }
    }

    container dtls {
      if-feature dtls13;
      presence dtls;
      uses tlsc:tls-client-grouping {
        // Using tls-client-grouping without TLS1.2 parameters
        // allowing only DTLS 1.3
        refine "client-identity/auth-type/tls12-psk" {
          // create the logical impossibility of enabling TLS1.2
          if-feature "not tlsc:client-ident-tls12-psk";
        }
        refine "server-authentication/tls12-psks" {
          // create the logical impossibility of enabling TLS1.2
          if-feature "not tlsc:server-auth-tls12-psk";
        }
        refine "hello-params/tls-versions/min" {
          must "not(derived-from-or-self(current(), "
            + "'tlscmn:tls12'))" {
            error-message
                  "TLS 1.2 is not supported as min TLS version";
          }
        }
        refine "hello-params/tls-versions/max" {
          must "not(derived-from-or-self(current(), "
            + "'tlscmn:tls12'))" {
            error-message
                  "TLS 1.2 is not supported as max TLS version";
          }
        }
      }
      description 
        "Container for configuring DTLS 1.3 parameters.";
    }

    leaf enable-segmentation {
      type boolean;
      default true;
      description 
        "When disabled, the publisher will not segment UDP-Notif
        messages and large messages may be fragmented at the IP
        layer.";
    }

    leaf max-segment-size {
      type uint16;
      description 
        "UDP-Notif provides a configurable max-segment-size to
        control the size of each segment (UDP-Notif header, with
        options, included).";
    }
  }

  augment "/sn:subscriptions/snr:receiver-instances/" +
          "snr:receiver-instance/snr:transport-type" {
    case udp-notif {
      container udp-notif-receiver {
        description
          "The UDP-notif receiver to send notifications to.";
        uses udp-notif-receiver;
      }
    }
    description
      "Augments the transport-type choice to include the 'udp-notif'
       transport.";
  }
}
]]></sourcecode>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document describes several new registries, the URIs from IETF
      XML Registry and the registration of a new YANG module name.</t>

      <section title="IANA Registries" anchor="sec_iana_reg">
        <t>This document requests IANA to create a new registry group called
        "UDP-Notif protocol".</t>
        
        <t>Also, this document requests IANA to create the
        following three registries called "UDP-Notif media types",
        "UDP-Notif option types", and "UDP-Notif header version", under
        the "UDP-Notif protocol" registry group.</t>
        
        <t>The registration procedure for all these registries follows the
        "Standards Action" policy (<xref target="RFC8126" section="4.9"/>).</t>

        <t>The first requested registry is the following:</t>

        <figure>
            <artwork align="left"><![CDATA[
  Registry Name: UDP-Notif media types
  Maximum value: 15]]></artwork>
          </figure>

        <t>These are the initial registrations for "UDP-Notif media
        types":</t>

        <figure>
            <artwork align="left"><![CDATA[
  Value: 0
  Description: Reserved
  Reference: RFC-to-be]]></artwork>
          </figure>

        <figure>
            <artwork align="left"><![CDATA[
  Value: 1
  Description: media type application/yang-data+json
  Reference: RFC 8040]]></artwork>
          </figure>

        <figure>
            <artwork align="left"><![CDATA[
  Value: 2
  Description: media type application/yang-data+xml
  Reference: RFC 8040]]></artwork>
          </figure>

        <figure>
            <artwork align="left"><![CDATA[
  Value: 3
  Description: media type application/yang-data+cbor
  Reference: RFC 9254]]></artwork>
          </figure>

        <t>The second requested registry is the following:</t>

        <figure>
            <artwork align="left"><![CDATA[
  Registry Name: UDP-Notif option types
  Maximum value: 255]]></artwork>
          </figure>

        <t>These are the initial registrations for "UDP-Notif options
        types":</t>

        <figure>
            <artwork align="left"><![CDATA[
  Value: 0
  Description: Reserved
  Reference: RFC-to-be]]></artwork>
          </figure>

        <figure>
            <artwork align="left"><![CDATA[
  Value: TBD1 (suggested value: 1)
  Description: Segmentation Option
  Reference: RFC-to-be]]></artwork>
          </figure>

        <figure>
            <artwork align="left"><![CDATA[
  Value: TBD2 (suggested value: 2)
  Description: Private Encoding Option
  Reference: RFC-to-be]]></artwork>
          </figure>

        <t>The third requested registry is the following:</t>

        <figure>
            <artwork align="left"><![CDATA[
  Registry Name: UDP-Notif header version
  Maximum value: 7]]></artwork>
          </figure>

        <t>These are the initial registrations for "UDP-Notif header
        version":</t>

        <figure>
            <artwork align="left"><![CDATA[
  Value: 0
  Description: UDP based Publication Channel for Streaming Telemetry
  Reference: draft-ietf-netconf-udp-pub-channel-05]]></artwork>
          </figure>

        <figure>
            <artwork align="left"><![CDATA[
  Value: 1
  Description: UDP-based Transport for Configured Subscriptions.
  Reference: RFC-to-be]]></artwork>
          </figure>
      </section>

      <section title="URI">
        <t>IANA is also requested to assign a new URI from the <xref
        target="RFC3688">IETF XML Registry</xref>. The following URI is
        suggested:</t>

        <figure>
            <artwork align="left"><![CDATA[
  URI: urn:ietf:params:xml:ns:yang:ietf-udp-notif-transport
  Registrant Contact: The IESG.
  XML: N/A; the requested URI is an XML namespace.]]></artwork>
          </figure>
      </section>

      <section title="YANG Module Name">
        <t>This document also requests a new YANG module names in the
        <xref target="RFC8342">YANG Module Names registry</xref> with the
        following suggestions:</t>

        <figure>
            <artwork align="left"><![CDATA[
  name: ietf-udp-notif-transport
  namespace: urn:ietf:params:xml:ns:yang:ietf-udp-notif-transport
  maintained by IANA: N
  prefix: unt
  reference: RFC-to-be]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="Implementation" title="Implementation Status">
      <t>Note to the RFC-Editor: Please remove this section before
      publishing.</t>

      <section anchor="OpenSourcePublisher" title="Open Source Publisher">
        <t>INSA Lyon implemented this document for a YANG Push publisher in an
        example implementation.</t>

        <t>The open source code can be obtained here: <xref
        target="INSA-Lyon-Publisher"/>.</t>
      </section>

      <section anchor="OpenSourceReceiver"
               title="Open Source Receiver Library">
        <t>INSA Lyon implemented this document for a YANG Push receiver as a
        library.</t>

        <t>The open source code can be obtained here: <xref
        target="INSA-Lyon-Receiver"/>.</t>
      </section>

      <section anchor="pmacct" title="Pmacct Data Collection">
        <t>The open source YANG push receiver library has been integrated into
        the Pmacct open source Network Telemetry data collection.</t>
      </section>

      <section anchor="Huawei" title="Huawei VRP">
        <t>Huawei implemented this document for a YANG Push publisher in their
        VRP platform.</t>
      </section>
	  
      <section anchor="SIXWIND" title="6WIND VSR">
        <t>6WIND implemented this document for a YANG Push publisher in their
        VSR platform.</t>
      </section>

      <section anchor="Cisco" title="Cisco IOS XR">
        <t>Cisco implemented this document for a YANG Push publisher in their
        IOS XR platform.</t>
      </section>
    </section>

    <section anchor="sec_security_considerations"
             title="Security Considerations">
      <t><xref target="RFC8085"/> states that "UDP applications that need to
      protect their communications against eavesdropping, tampering, or
      message forgery SHOULD employ end-to-end security services provided by
      other IETF protocols". As mentioned above, the proposed mechanism is
      designed to be used in controlled environments, as defined in <xref
      target="RFC8085"/> also known as "limited domains", as defined in <xref
      target="RFC8799"/>. Thus, a security layer is not necessary required.
      Nevertheless, an encryption layer MUST be implemented for non secured
      networks. A specification of UDP-notif using DTLS 1.3 as its encryption layer
      is presented in <xref target="sec_dtls_udp_notif"/>.</t>

      
      <t>The following text uses the template described in Section 3.7 of
      <xref target="I-D.ietf-netmod-rfc8407bis"/>.</t>

      <t>The YANG module specified in this document defines a schema for
      data that is designed to be accessed via network management protocols
      such as NETCONF <xref target="RFC6241"/> or RESTCONF <xref target="RFC8040"/>.
      The lowest NETCONF layer is the secure transport layer, and the
      mandatory-to-implement secure transport is Secure Shell (SSH) <xref target="RFC6242"/>.
      The lowest RESTCONF layer is HTTPS, and the mandatory-to-implement
      secure transport is TLS <xref target="RFC8446"/>.</t>

      <t>The Network Configuration Access Control Model (NACM) <xref target="RFC8341"/>
      provides the means to restrict access for particular NETCONF or RESTCONF users to
      a preconfigured subset of all available NETCONF or RESTCONF protocol operations
      and content.</t>

      <t>The YANG modules defined in this document make use of groupings that are defined in
      <xref target="I-D.ietf-netconf-udp-client-server"/> and <xref target="RFC9645"/>.
      Please see Security Considerations sections of those documents for considerations
      related to sensitivity and vulnerability of the data nodes defined in them.</t>

      <t>There are a number of data nodes defined in this YANG module that are
      writable/creatable/deletable (i.e., config true, which is the default). These data
      nodes may be considered sensitive or vulnerable in some network environments. Write
      operations (e.g., edit-config) to these data nodes without proper protection can have
      a negative effect on network operations. These are the subtrees and data nodes and
      their sensitivity/vulnerability:</t>

      <ul>
        <li>The data nodes "remote-address", "remote-port", "local-address",
        and "local-port" in the "ietf-udp-notif-transport" module specify transport parameters
        for the recipient of UDP-Notif messages. Unauthorized modification of these transport
        parameters could redirect notifications to unintended recipients.</li>
      </ul>

      <t>Some of the readable data nodes in this YANG module may be considered
      sensitive or vulnerable in some network environments. It is thus important
      to control read access (e.g., via get, get-config, or notification) to these data
      nodes. The "ietf-udp-notif-transport" module does not define any readable node.</t>

      <t>Some of the RPC operations in this YANG module may be considered sensitive or
      vulnerable in some network environments. It is thus important to control access
      to these operations. The YANG module defined in this document does not define any RPC
      operations.</t>

    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The authors of this documents would like to thank Lucas Aubard, Alexander
      Clemm, Benoit Claise, Ebben Aries, Eric Voit, Huiyang Yang, Kent Watsen, Mahesh
      Jethanandani, Marco Tollini, Hannes Tschofenig, Michael Tuxen, Rob Wilton, Sean
      Turner, Stephane Frenot, Timothy Carey, Tim Jenkins, Tom Petch, Yunan Gu,
      Joseph Touch, Andy Bierman, Carsten Bormann, Mohamed Boucadair, Weiqiang Cheng
      and Giuseppe Fioccola for their constructive
	    suggestions for improving this document.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="https://bib.ietf.org/public/rfc/bibxml9/reference.BCP.0195.xml"?>
      <?rfc include="https://bib.ietf.org/public/rfc/bibxml9/reference.BCP.0230.xml"?>

      <?rfc include="https://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?>

      <?rfc include='https://xml.resource.org/public/rfc/bibxml/reference.RFC.3688.xml'?>

      <?rfc include='https://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml'?>

      <?rfc include="https://xml.resource.org/public/rfc/bibxml/reference.RFC.6242.xml"?>

      <?rfc include="https://xml.resource.org/public/rfc/bibxml/reference.RFC.6991.xml"?>

      <?rfc include="https://xml.resource.org/public/rfc/bibxml/reference.RFC.8085.xml"?>

      <?rfc include="https://xml.resource.org/public/rfc/bibxml/reference.RFC.8126.xml"?>

      <?rfc include="https://xml.resource.org/public/rfc/bibxml/reference.RFC.8174.xml"?>

      <?rfc include="https://xml.resource.org/public/rfc/bibxml/reference.RFC.8341.xml"?>
      <?rfc include="https://xml.resource.org/public/rfc/bibxml/reference.RFC.8342.xml"?>

      <?rfc include="https://xml.resource.org/public/rfc/bibxml/reference.RFC.8446.xml"?>
      
      <?rfc include="https://xml.resource.org/public/rfc/bibxml/reference.RFC.8639.xml"?>

      <?rfc include="https://xml.resource.org/public/rfc/bibxml/reference.RFC.8640.xml"?>

      <?rfc include="https://xml.resource.org/public/rfc/bibxml/reference.RFC.8650.xml"?>

      <?rfc include="https://xml.resource.org/public/rfc/bibxml/reference.RFC.9254.xml"?>

      <?rfc include="https://xml.resource.org/public/rfc/bibxml/reference.RFC.9147.xml"?>
      <?rfc include="https://xml.resource.org/public/rfc/bibxml/reference.RFC.9645.xml"?>

      <?rfc include='https://bib.ietf.org/public/rfc/bibxml-ids/reference.I-D.ietf-netconf-https-notif.xml'?>
      <?rfc include='https://bib.ietf.org/public/rfc/bibxml-ids/reference.I-D.ietf-netmod-rfc8407bis.xml'?>

      <?rfc include="https://bib.ietf.org/public/rfc/bibxml-ids/reference.I-D.ietf-netconf-distributed-notif.xml"?>

      <?rfc include="https://bib.ietf.org/public/rfc/bibxml-ids/reference.I-D.ietf-netconf-udp-client-server.xml"?>
    </references>

    <references title="Informative References">
      <!-- <?rfc include="http://xml.resource.org/public/rfc/bibxml-ids/reference.I-D.ietf-netconf-notification-messages.xml"?> -->

      <!-- <?rfc include="http://xml.resource.org/public/rfc/bibxml-ids/reference.I-D.ahuang-netconf-notif-yang.xml"?> -->

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.6241.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.7011.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.7923.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.7951.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8040.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8641.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8340.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8799.xml"?>

      <reference anchor="INSA-Lyon-Publisher"
                 target="https://github.com/network-analytics/udp-notif-scapy">
        <front>
          <title>INSA Lyon, YANG Push publisher example implementation</title>

          <author/>

          <date/>
        </front>
      </reference>

      <reference anchor="INSA-Lyon-Receiver"
                 target="https://github.com/network-analytics/udp-notif-c-collector">
        <front>
          <title>INSA Lyon, YANG Push receiver library implementation</title>

          <author/>

          <date/>
        </front>
      </reference>

      <reference anchor="Paolo-Lucente-Pmacct"
                 target="https://github.com/pmacct/pmacct">
        <front>
          <title>Paolo Lucente, Pmacct open source Network Telemetry Data
          Collection</title>

          <author/>

          <date/>
        </front>
      </reference>
    </references>

    <section anchor="example" title="UDP-Notif Examples">
      <t>This non-normative section shows two examples of how the the
      "ietf-udp-notif-transport" YANG module can be used to configure a <xref
      target="RFC8639"/> based publisher to send notifications to a receiver
      and an example of a YANG Push notification message using UDP-Notif
      transport protocol.</t>

      <section anchor="example_no_dtls"
               title="Configuration for UDP-Notif transport with DTLS disabled">
        <t>This example shows how UDP-Notif can be configured without DTLS
        encryption.</t>

        <t><figure>
            <artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

<?xml version='1.0' encoding='UTF-8'?>
<config xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <subscriptions xmlns="urn:ietf:params:xml:ns:yang:ietf-subscribed-\
notifications">
    <subscription>
      <id>6666</id>
      <stream-subtree-filter>some-subtree-filter</stream-subtree-fil\
ter>
      <stream>some-stream</stream>
      <transport xmlns:unt="urn:ietf:params:xml:ns:yang:ietf-udp-not\
if-transport">unt:udp-notif</transport>
      <encoding>encode-json</encoding>
      <receivers>
        <receiver>
          <name>subscription-specific-receiver-def</name>
          <receiver-instance-ref xmlns="urn:ietf:params:xml:ns:yang:\
ietf-subscribed-notif-receivers">global-udp-notif-receiver-def</rece\
iver-instance-ref>
        </receiver>
      </receivers>
      <periodic xmlns="urn:ietf:params:xml:ns:yang:ietf-yang-push">
        <period>6000</period>
      </periodic>
    </subscription>
    <receiver-instances xmlns="urn:ietf:params:xml:ns:yang:ietf-subs\
cribed-notif-receivers">
      <receiver-instance>
        <name>global-udp-notif-receiver-def</name>
        <udp-notif-receiver xmlns="urn:ietf:params:xml:ns:yang:ietf-\
udp-notif-transport">
          <remote-address>192.0.5.1</remote-address>
          <remote-port>12345</remote-port>
          <enable-segmentation>false</enable-segmentation>
          <max-segment-size/>
        </udp-notif-receiver>
      </receiver-instance>
    </receiver-instances>
  </subscriptions>
</config>
  ]]></artwork>
          </figure></t>
      </section>

      <section anchor="example_dtls"
               title="Configuration for UDP-Notif transport with DTLS enabled">
        <t>This example shows how UDP-Notif can be configured with DTLS
        encryption.</t>

        <t><figure>
            <artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

<?xml version='1.0' encoding='UTF-8'?>
<config xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <subscriptions xmlns="urn:ietf:params:xml:ns:yang:ietf-subscribed-\
notifications">
    <subscription>
      <id>6666</id>
      <stream-subtree-filter>some-subtree-filter</stream-subtree-fil\
ter>
      <stream>some-stream</stream>
      <transport xmlns:unt="urn:ietf:params:xml:ns:yang:ietf-udp-not\
if-transport">unt:udp-notif</transport>
      <encoding>encode-json</encoding>
      <receivers>
        <receiver>
          <name>subscription-specific-receiver-def</name>
          <receiver-instance-ref xmlns="urn:ietf:params:xml:ns:yang:\
ietf-subscribed-notif-receivers">global-udp-notif-receiver-dtls-def<\
/receiver-instance-ref>
        </receiver>
      </receivers>
      <periodic xmlns="urn:ietf:params:xml:ns:yang:ietf-yang-push">
        <period>6000</period>
      </periodic>
    </subscription>
    <receiver-instances xmlns="urn:ietf:params:xml:ns:yang:ietf-subs\
cribed-notif-receivers">
      <receiver-instance>
        <name>global-udp-notif-receiver-dtls-def</name>
        <udp-notif-receiver xmlns="urn:ietf:params:xml:ns:yang:ietf-\
udp-notif-transport">
          <remote-address>192.0.5.1</remote-address>
          <remote-port>12345</remote-port>
          <enable-segmentation>false</enable-segmentation>
          <max-segment-size/>
          <dtls>
            <client-identity>
              <tls13-epsk>
                <local-definition>
                  <key-format>ct:octet-string-key-format</key-format>
                  <cleartext-key>BASE64VALUE=</cleartext-key>
                </local-definition>
                <external-identity>example_external_id</external-ide\
ntity>
                <hash>sha-256</hash>
                <context>example_context_string</context>
                <target-protocol>8443</target-protocol>
                <target-kdf>12345</target-kdf>
              </tls13-epsk>
            </client-identity>
            <server-authentication>
              <ca-certs>
                <local-definition>
                  <certificate>
                    <name>Server Cert Issuer #1</name>
                    <cert-data>BASE64VALUE=</cert-data>
                  </certificate>
                  <certificate>
                    <name>Server Cert Issuer #2</name>
                    <cert-data>BASE64VALUE=</cert-data>
                  </certificate>
                </local-definition>
              </ca-certs>
              <ee-certs>
                <local-definition>
                  <certificate>
                    <name>My Application #1</name>
                    <cert-data>BASE64VALUE=</cert-data>
                  </certificate>
                  <certificate>
                    <name>My Application #2</name>
                    <cert-data>BASE64VALUE=</cert-data>
                  </certificate>
                </local-definition>
              </ee-certs>
              <raw-public-keys>
                <local-definition>
                  <public-key>
                    <name>corp-fw1</name>
                    <public-key-format>ct:subject-public-key-info-fo\
rmat</public-key-format>
                    <public-key>BASE64VALUE=</public-key>
                  </public-key>
                  <public-key>
                    <name>corp-fw2</name>
                    <public-key-format>ct:subject-public-key-info-fo\
rmat</public-key-format>
                    <public-key>BASE64VALUE=</public-key>
                  </public-key>
                </local-definition>
              </raw-public-keys>
              <tls13-epsks/>
            </server-authentication>
            <keepalives>
              <test-peer-aliveness>
                <max-wait>30</max-wait>
                <max-attempts>3</max-attempts>
              </test-peer-aliveness>
            </keepalives>
          </dtls>
        </udp-notif-receiver>
      </receiver-instance>
    </receiver-instances>
  </subscriptions>
</config>
  ]]></artwork>
          </figure></t>
      </section>

      <section anchor="example_yp_message"
               title="YANG Push message with UDP-Notif transport protocol">
        <t>This example shows how UDP-Notif is used as a transport protocol to
        send a "push-update" notification <xref target="RFC8641"/> encoded in
        JSON <xref target="RFC7951"/>.</t>

        <t>Assuming the publisher needs to send the JSON payload showed in
        <xref target="fig_ex_json_payload"/>, the UDP-Notif transport is
        encoded following the <xref target="fig_udp_notif_ex"/>. The UDP-Notif
        message is then encapsulated in a UDP frame.</t>

        <t><figure anchor="fig_ex_json_payload"
            title="JSON Payload to be sent">
            <artwork align="center"><![CDATA[
{
    "ietf-notification:notification": {
        "eventTime": "2024-02-10T08:00:11.22Z",
        "ietf-yang-push:push-update": {
            "id": 1011,
            "datastore-contents": {
                "ietf-interfaces:interfaces": [
                    {
                        "interface": {
                            "name": "eth0",
                            "oper-status": "up"
                        }
                    }
                ]
            }
        }
    }
}
  ]]></artwork>
          </figure></t>

        <t><figure anchor="fig_udp_notif_ex"
            title="UDP-Notif transport message">
            <artwork align="center"><![CDATA[
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-----+-+-------+---------------+-------------------------------+
 |Ver=1|0|  MT=1 | Header_Len=12 |      Message_Length=230       |
 +-----+-+-------+---------------+-------------------------------+
 |                   Message Publisher ID=2                      |
 +---------------------------------------------------------------+
 |                      Message ID=1563                          |
 +---------------------------------------------------------------+
 |              YANG Push JSON payload (Len=218 octets)          |
 |{"ietf-notification:notification":{"eventTime":"2024-02-10T08:0|
 |0:11.22Z","ietf-yang-push:push-update":{"id":1011,"datastore-co|
 |ntents":{"ietf-interfaces:interfaces":[{"interface":{"name":"et|
 |h0","oper-status":"up"}}]}}}}                                  |
 +---------------------------------------------------------------+
  ]]></artwork>
          </figure></t>
      </section>
    </section>
  </back>
</rfc>
